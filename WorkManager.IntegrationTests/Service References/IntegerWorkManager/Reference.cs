//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkManager.IntegrationTests.IntegerWorkManager {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IntegerWorkManager.IWorkManager", CallbackContract=typeof(WorkManager.IntegrationTests.IntegerWorkManager.IWorkManagerCallback))]
    public interface IWorkManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/StartWorking")]
        void StartWorking();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/StartWorking")]
        System.Threading.Tasks.Task StartWorkingAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/StopWorking")]
        void StopWorking();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/StopWorking")]
        System.Threading.Tasks.Task StopWorkingAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/WorkComplete")]
        void WorkComplete(int workItemGuid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/WorkComplete")]
        System.Threading.Tasks.Task WorkCompleteAsync(int workItemGuid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWorkManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/DoWork")]
        void DoWork(int number);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWorkManagerChannel : WorkManager.IntegrationTests.IntegerWorkManager.IWorkManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkManagerClient : System.ServiceModel.DuplexClientBase<WorkManager.IntegrationTests.IntegerWorkManager.IWorkManager>, WorkManager.IntegrationTests.IntegerWorkManager.IWorkManager {
        
        public WorkManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WorkManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WorkManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WorkManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WorkManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void StartWorking() {
            base.Channel.StartWorking();
        }
        
        public System.Threading.Tasks.Task StartWorkingAsync() {
            return base.Channel.StartWorkingAsync();
        }
        
        public void StopWorking() {
            base.Channel.StopWorking();
        }
        
        public System.Threading.Tasks.Task StopWorkingAsync() {
            return base.Channel.StopWorkingAsync();
        }
        
        public void WorkComplete(int workItemGuid) {
            base.Channel.WorkComplete(workItemGuid);
        }
        
        public System.Threading.Tasks.Task WorkCompleteAsync(int workItemGuid) {
            return base.Channel.WorkCompleteAsync(workItemGuid);
        }
    }
}
