//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkManager.Client.IntegerWorkManager {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkItem", Namespace="http://schemas.datacontract.org/2004/07/WorkManager.DataContracts")]
    [System.SerializableAttribute()]
    public partial class WorkItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid WorkGuidField;
        
        private int WorkToDoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid WorkGuid {
            get {
                return this.WorkGuidField;
            }
            set {
                if ((this.WorkGuidField.Equals(value) != true)) {
                    this.WorkGuidField = value;
                    this.RaisePropertyChanged("WorkGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int WorkToDo {
            get {
                return this.WorkToDoField;
            }
            set {
                if ((this.WorkToDoField.Equals(value) != true)) {
                    this.WorkToDoField = value;
                    this.RaisePropertyChanged("WorkToDo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IntegerWorkManager.IWorkManager", CallbackContract=typeof(WorkManager.Client.IntegerWorkManager.IWorkManagerCallback))]
    public interface IWorkManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/StartWorking")]
        void StartWorking();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/StartWorking")]
        System.Threading.Tasks.Task StartWorkingAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/StopWorking")]
        void StopWorking();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/StopWorking")]
        System.Threading.Tasks.Task StopWorkingAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/WorkComplete")]
        void WorkComplete(WorkManager.Client.IntegerWorkManager.WorkItem workItem);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/WorkComplete")]
        System.Threading.Tasks.Task WorkCompleteAsync(WorkManager.Client.IntegerWorkManager.WorkItem workItem);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWorkManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWorkManager/DoWork")]
        void DoWork(WorkManager.Client.IntegerWorkManager.WorkItem workItem);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWorkManagerChannel : WorkManager.Client.IntegerWorkManager.IWorkManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkManagerClient : System.ServiceModel.DuplexClientBase<WorkManager.Client.IntegerWorkManager.IWorkManager>, WorkManager.Client.IntegerWorkManager.IWorkManager {
        
        public WorkManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WorkManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WorkManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WorkManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WorkManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void StartWorking() {
            base.Channel.StartWorking();
        }
        
        public System.Threading.Tasks.Task StartWorkingAsync() {
            return base.Channel.StartWorkingAsync();
        }
        
        public void StopWorking() {
            base.Channel.StopWorking();
        }
        
        public System.Threading.Tasks.Task StopWorkingAsync() {
            return base.Channel.StopWorkingAsync();
        }
        
        public void WorkComplete(WorkManager.Client.IntegerWorkManager.WorkItem workItem) {
            base.Channel.WorkComplete(workItem);
        }
        
        public System.Threading.Tasks.Task WorkCompleteAsync(WorkManager.Client.IntegerWorkManager.WorkItem workItem) {
            return base.Channel.WorkCompleteAsync(workItem);
        }
    }
}
